# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Profile {
  id: ID!
  email: String!
  fullName: String!
  created: DateTime!
  updated: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ProfileEdge {
  """The node containing the Profile"""
  node: Profile!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type ProfileConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ProfileEdge!]!
}

type ProfileAggregateGroupBy {
  id: ID
  email: String
  fullName: String
  created: DateTime
  updated: DateTime
}

type ProfileCountAggregate {
  id: Int
  email: Int
  fullName: Int
  created: Int
  updated: Int
}

type ProfileMinAggregate {
  id: ID
  email: String
  fullName: String
  created: DateTime
  updated: DateTime
}

type ProfileMaxAggregate {
  id: ID
  email: String
  fullName: String
  created: DateTime
  updated: DateTime
}

type Query {
  profile(
    """The id of the record to find."""
    id: ID!
  ): Profile
  profiles(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ProfileFilter = {}

    """Specify to sort results."""
    sorting: [ProfileSort!] = []
  ): ProfileConnection!
  login(password: String!, email: String!): Profile!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input ProfileFilter {
  and: [ProfileFilter!]
  or: [ProfileFilter!]
  id: IDFilterComparison
  email: StringFieldComparison
  fullName: StringFieldComparison
  created: DateFieldComparison
  updated: DateFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input ProfileSort {
  field: ProfileSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProfileSortFields {
  id
  email
  fullName
  created
  updated
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Mutation {
  createOneProfile(input: CreateOneProfileInput!): Profile!
  updateOneProfile(input: UpdateOneProfileInput!): Profile!
}

input CreateOneProfileInput {
  """The record to create"""
  profile: ProfileInput!
}

input ProfileInput {
  email: String!
  fullName: String!
  password: String!
}

input UpdateOneProfileInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ProfileInput!
}
